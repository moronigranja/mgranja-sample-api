/*
 * Calcula Juros API
 *
 * Calcula valor final de uma aplicação de Juros por determinado tempo
 *
 * OpenAPI spec version: 1.0.0
 * Contact: moronigranja@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Mgranja.api2.Attributes;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.ComponentModel.DataAnnotations;
using System.Globalization;

namespace Mgranja.api2.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalculaJurosController : ControllerBase
    {
        private readonly IJurosService _jurosService;
        private readonly CultureInfo ci = new CultureInfo("pt-br");

        /// <summary>
        /// Construtor padrao do controlador, deve ser injetado o serviço que provê o valor do Juros
        /// </summary>
        /// <param name="jurosService"></param>
        public CalculaJurosController(IJurosService jurosService)
        {
            _jurosService = jurosService;
        }

        /// <summary>
        /// Calcula juros compostos sobre um valor inicial
        /// </summary>
        /// <remarks>Calcula o valor final de uma aplicacao financeira apos uma quantidade de meses utilizando juros compostos. A taxa de juros é buscada diretamente de uma API. </remarks>
        /// <param name="valorinicial">valor inicial de uma aplicação usando virgula como separador decimal</param>
        /// <param name="meses">numero de meses completos de duracao da aplicacao financeira</param>
        /// <response code="200">valor final calculado</response>
        /// <response code="400">parametro incorreto ou invalido</response>
        [HttpGet]
        [Route("/MGranja/api2/1.0.0/calculajuros")]
        [ValidateModelState]
        [SwaggerOperation("CalculaJuros")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "valor final calculado")]
        public virtual ActionResult<string> CalculaJuros([FromQuery][Required()] string valorinicial, [FromQuery][Required()] int? meses)
        {
            if (double.TryParse(valorinicial, NumberStyles.Float | NumberStyles.AllowThousands, ci, out double dblValorInicial) && meses > 0)
            {
                double jurosAtual = _jurosService.GetJuros();

                double valorFinal = dblValorInicial * Math.Pow((double)(1 + jurosAtual), meses.Value);

                return Ok(valorFinal.ToString("F2",ci));
            }
            else if(meses <= 0)
            {
                return BadRequest("Quantidade de meses invalida. Deve ser um valor positivo.");
            }
            else
            {
                return BadRequest("Valor decimal inválido.");
            }
        }
    }
}
